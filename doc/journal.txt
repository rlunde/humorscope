=====================================
Tuesday, March 13, 2018
=====================================

Time to resurrect my old Humorscope
site, in the form of a react/redux page
that uses thing-a-day to retrieve
random stuff.

What I'll try:

css grid
react
redux
thing-a-day
ES6
mongodb

The site itself will have 12 randomly
selected predictions per day, a daily
quote, and a daily thing to be grateful
for (or maybe a daily lifehack?)

Let's see how incremental we can make
this?

=====================================
Wednesday, March 14, 2018
=====================================

OK, so nothing to show for all my effort
today, which is just so incredibly irritating.
I'm going to check this in, just because.

Phooey.

=====================================
Friday, March 16, 2018
=====================================

I think I want to use something like the "Holy Grail" CSS Grid layout.

I'll make a sample directory to use as a basis for the React side of things.

=====================================
Saturday, March 17, 2018
=====================================

On second thought, I don't actually need something as complicated as the Holy Grail 
CSS layout. At least for the first rough draft, I just want the simplest thing that
will possibly work:

Header
Current date
Quote of the day
Table with zodiac sign, name, date on the left, daily "prediction" on the right

For the landing page I don't need any login.

I'd like to have an admin page where I can add or edit predictions or quotes,
but even that can come later. I'll need a second set of APIs to thing-a-day to
support adding and editing categories and entries.

Let's keep this so simple that it makes a good example for people starting
from github, and focus on making it the content, not the code, that makes people
find out about it.

=====================================
Sunday, March 18, 2018
=====================================
I found some free clip-art for zodiac signs. I'm figuring out
how to use it as CSS sprites so I only have to download the composite.

=====================================
Tuesday, March 20, 2018
=====================================

I'm just trying to get more of the format working today (and label the signs).

=====================================
Saturday, March 24, 2018
=====================================

I converted the format to CSS Grid earlier this week. Now it's time to
hook it up to data via thing-a-day. I'm putting my old data for predictions
and quotes here. (Most of them are very lame by my current standards, but
I'll add an edit/delete/insert admin page later.)

I tried using mongoimport with predictions first, since I was able to trim the
data down to one line per prediction:
 
Rons-MBP:data ron$ ./load_predictions.sh
2018-03-24T19:23:55.026-0400	no collection specified
2018-03-24T19:23:55.026-0400	using filename 'predictions' as collection
2018-03-24T19:23:55.050-0400	connected to: localhost
2018-03-24T19:23:55.100-0400	imported 4812 documents

Now I realize I'm going to have trouble picking a random record with GUIDs
as _id (which it made for me). I think I may have to add a field that's just
a record counter (or something) to make random selection easier -- or perhaps
update each record to use the counter as _id.

I'll try figuring out pymongo. That should be fun.

=====================================
Sunday, March 25, 2018
=====================================

It turns out that picking random records is super easy. 

db.predictions.aggregate({ $sample: {size: 10}})

Now I need to load the quotes data.

The quote.data file is one or more lines of text per quote separated
by a # on a line by itself.

It just took me around half an hour to install pymongo, given that
I got weird errors when running pip the way it said to:
python -m pip install pymongo
...
ImportError: cannot import name _remove_dead_weakref
...

But when I run pip without the "python -m" it worked fine. I also downloaded
the latest stable python 2.7.10 and 3.6.4 as part of that, although it didn't 
fix anything.

This actually worked too:
python3 -m pip install pymongo

As did this:
pip3 install --upgrade pip

OK, now to parse the file...

I wrote a quick and dirty script to load the quotes collection from the file.
Looks like it worked.

=====================================
Monday, April 30, 2018
=====================================

I had a horrible awful very bad month. Mostly.

I'm trying to start to get back to this tonight.

Let's break it down:

1) generate the daily page
  a) get the daily quote
    i) don't repeat any quote for as long as possible
  b) get the 12 daily predictions
    i) they should all be unique
    ii) don't repeat any predictions for as long as possible
    iii) (optional) don't repeat any predictions for the same sign even longer
  c) format the page
2) cache the page
3) get the cached page or generate it

Let's start with the quote of the day.

Damn it. I have to fix the hoek security vulnerability, which I did
yesterday for another project, but I didn't write down how. Here we
go again...

Here's the report:
https://nvd.nist.gov/vuln/detail/CVE-2018-3728

npm install hoek@5.0.3 --save
git commit -a -m"fix hoek security issue"
git push

=====================================
Monday, May 7, 2018
=====================================

I wonder how hard it would be to turn this into a React Native app? I'm going
to go to the Google I/O extended event tomorrow, which has an Andoid IoT event.
It'd be cool if I didn't have to write Java for Android to do the same thing
as I want to do with this.


=====================================
Wednesday, May 9, 2018
=====================================

I tried installing Quokka.js since MPJ goes on about it, but even after
finally figuring out how to get it to "almost" work on a React file (after spending
a whole lot of time) it wouldn't actually work due to trying to import "./App.css".
It says:

Quokka #1 (node: v8.1.4, babel: v6.26.0)​​​​
​​Only 'Pro' edition of Quokka.js supports project files import.​​

Sorry, but I'm not willing to spend a bunch of money in the hope that something
might actually do something. If you give me a trial, the trial should actually
work in a way that show's "something".

